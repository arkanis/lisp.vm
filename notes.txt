This file contains some notes, stray thoughts or design ideas. It isn't
documentation! Stuff written here is probably not implemented at all or not in
this way. Be aware: This is just my brain dump.


# Ideas

- Some confort functions
	- lvm_print_str(lvm, atom) → malloced string
	- lvm_read_str(lvm, str) → atom
- Find a proper way to patch the data pointer of the atom (lvm_gc_collect_atom)
- Implement regions for large atoms (data > 16 MiByte, see "Handling of large atoms" in garbate-collector-02.txt)
- Migrate pairs to arrays (when we have variable length atoms)


# Source code structure

- Have one public header file. So the library can be used with just one .h and
  .a file (header and static library).
- Have one internal header file that declares all structures used by every one.
- The rest are .c files that implement the delcared functions. Stuff only needed
  in one .c file is declared in that file only.


## GC tipps from Gittinger

Only call GC at defined moments. If we run out of memory just set a flag and
allocate more memory. Then collect once we reach a defined point where we know
how the environment is: No buildin has stuff on the C stack or in registers we
can't scan.

- AST interpreter: in the trampoline
- Bytecode interpreter: At the start of each bytecode (first thing in the for loop)
- Machine code: At calls, returns and _backwards_ jumps
	- Forward jumps make progress so we don't need to check them
	- The check on return can be optimized by jumping to the GC instead of the
	  return address. When the GC needs to run we just patch the return address
	  to the GC address and store the real return address somewhere else.

madvise was created for sequential sweep phase of the GC. So use it. :)

Finalization with Baker GC:

- Finilazation table with pointers to objects that need finalization
- After copying live objects look through finalization table:
	- If an object doesn't have a forward bit set we need to finalize it
	- If not we just have to patch the pointer to the forward pointer

3 generations of small spaces

Book: Garbage Collection for Uniprocessors from Baker


# Compile while statement

Normally compiled while statement requires 2 branches (conditional,
unconditional). Can be optimized to just one conditional branch (and one
unconditional just once at the start of the loop):

JMP LL
L0: statement
LL: CMP ...
    JUMP_IF_FALSE L0


# JITing

Common aproach: Abstract interpretation

Good Book: PhD thesis from Urs Hölzle - Dynamic compiler for SELF
Dynamic compilation for dynamic languages


# Argument stack

Why PUSH and POP on an argument stack? Why not Just pop it automatically when
a builtin call is done? There seems to be no real reason.

Manual push and pop might even cause trouble with the GC. If an argument is
poped and a builtin uses it the GC doesn't see it. When the GC is run while the
builtin executes it might free the popped argument while it is still used.

So instead we just put all arguments on the argument stack and give the builtin
an argc and argv style argument list. When the builtin is done we can drop all
arguments from the stack at once.


# Error handling

What about an error atom to unwind the stack when an error occured? Something
like NaN in floating point. Should contain the error message. Might be useful to
build something like exception handling.

- When an error atom is returned during eval() or while evaling lambda arguments
  the evaluation is aborted and the error atom is returned.
- Needs special handling from everything that evals, including all builtins!
- Extend it to reader and printer as well? Useful to unwind the stack in the
  parser?


# Hash tables

Hash function recommended by Gittinger: fnv1a. Seems to be a simple hash
function made for identifiers. Maybe more compact than Murmur3 but probably not
as universal.

Calculate next prime for hash table size:

- Calculate highest set bit of hash table length (count leading zeros instruction)
- Create a fixed table that maps the number of the highest set bit to a fixed
  prime number. This table just has 64 entries filled with pre calculated prime
  numbers.

Not sure if a prime number size really avoids collisions. Would need measuring
with some actual running code (environment accesses).


# User defined atoms

- Use lower 8 bits of lvm_atom_type_t for normal types.
- When type set to LVM_T_USER the higher 24 or 16 bit are the index of the user
  defined atom class (the classes are stored in an interpreter global table).
- A class defines function pointers for interactions with buildin functions
  (e.g. when this atom is evaled, ... are there that many?)
- To create a user defined atom the user first has to register a class. That
  returns a class id with which the user can create user atoms.
- The user defined atom itself just contains a void pointer to whatever the user
  wants to store for that atom.
- Similar to resource objects in PHP? E.g. for stream I/O?


# API sketch for a bytecode compiler and interpreter

lvm_new(...)
	Probably with an options struct with stack size, heap size, etc.
lvm_destroy()
lvm_run(module)

lvm_compile(source_code, existing_module) → module
	Generated code and data is appended to existing_module. If it's NULL a new
	module is created.

lvm_mod_load(filename) → module
lvm_mod_save(module, filename)
lvm_mod_destroy(module)
